package de.wackernagel.android.sidekick.annotations.processor;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;

import javax.annotation.processing.Filer;

import de.wackernagel.android.sidekick.annotations.ConflictClause;
import de.wackernagel.android.sidekick.annotations.ForeignKey;
import de.wackernagel.android.sidekick.annotations.NotNull;
import de.wackernagel.android.sidekick.annotations.Unique;

import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

public class ContractGenerator {

    private final TypeSpec generatedContract;

    public ContractGenerator(final TableDefinition tableDefinition, final Set<ColumnDefinition> fields) {
        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder( tableDefinition.getClassName() + "Contract")
                .addModifiers(PUBLIC)
                .addJavadoc("Generated by Sidekick at " + new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.ENGLISH).format(new Date()) + "\n");

        final Set<ColumnDefinition> contractFields = filter( fields );
        extend(classBuilder, tableDefinition, contractFields);
        tableConstant(classBuilder, tableDefinition.getTableName() );
        columnConstants(classBuilder, contractFields);
        projection(classBuilder, contractFields);
        contentUri(classBuilder, tableDefinition.getTableAuthority());
        insert(classBuilder, contractFields);
        update(classBuilder);
        delete(classBuilder);

        generatedContract = classBuilder.build();
    }

    private Set<ColumnDefinition> filter( final Set<ColumnDefinition> columnDefinitions ) {
        final Set<ColumnDefinition> contractFields = new LinkedHashSet<>( columnDefinitions );
        for( final Iterator<ColumnDefinition> iterator = contractFields.iterator(); iterator.hasNext() ; ) {
            if( iterator.next().isCollectionType() ) {
                iterator.remove();
            }
        }
        return contractFields;
    }

    private void extend( final TypeSpec.Builder classBuilder, final TableDefinition table, final Set<ColumnDefinition> fields) {
        classBuilder.superclass(ClassName.get("de.wackernagel.android.sidekick.frameworks.contentproviderprocessor.contract", "TableContract"));

        classBuilder.addMethod(
                MethodSpec.methodBuilder("getTable")
                        .addModifiers(PUBLIC)
                        .addAnnotation(Override.class)
                        .returns(String.class)
                        .addStatement("return $L", "TABLE")
                        .build());

        final ClassName db = ClassName.get("android.database.sqlite", "SQLiteDatabase");

        classBuilder.addMethod(
                MethodSpec.methodBuilder("onCreate")
                        .addModifiers(PUBLIC)
                        .addAnnotation(Override.class)
                        .addParameter(db, "db", FINAL)
                        .addCode(createTableStatement(table, fields))
                        .returns(TypeName.VOID)
                        .build()
        );

        classBuilder.addMethod(
                MethodSpec.methodBuilder("onUpgrade")
                        .addModifiers(PUBLIC)
                        .addAnnotation(Override.class)
                        .addParameter(db, "db", FINAL)
                        .addParameter(int.class, "oldVersion", FINAL)
                        .addParameter(int.class, "newVersion", FINAL)
                        .returns(TypeName.VOID)
                        .build()
        );
    }

    private CodeBlock createTableStatement( final TableDefinition table, final Set<ColumnDefinition> fields) {
        final CodeBlock.Builder sql = CodeBlock.builder();
        sql.add( "db.execSQL( \"CREATE TABLE IF NOT EXISTS \" + $L + $S\n", "TABLE", " (" );
        int index = 0;
        for( ColumnDefinition column : fields ) {
            if( column.skipSQLite() ) {
                continue;
            }

            sql.add( "\t+ $L + \" " + column.getSQLiteType(), column.getConstantFieldName() );

            if( column.isPrimaryKey() ) {
                sql.add( " CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_pk PRIMARY KEY AUTOINCREMENT" );
            }

            final NotNull notNull = column.notNull();
            if( notNull != null ) {
                sql.add(" CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_not_null NOT NULL");
                if( notNull.onConflict() != ConflictClause.NONE ) {
                    sql.add( " ON CONFLICT ").add(notNull.onConflict().toString() );
                }
            }

            final Unique unique = column.unique();
            if( unique != null ) {
                sql.add(" CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_unique UNIQUE");
                if( unique.onConflict() != ConflictClause.NONE ) {
                    sql.add( " ON CONFLICT ").add(unique.onConflict().toString() );
                }
            }

            final String defaultValue = column.defaultValue();
            if( defaultValue != null && defaultValue.length() > 0 ) {
                sql.add(" CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_default DEFAULT ").add(defaultValue);
            }

            if( column.isBoolean() ) {
                sql.add(" CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_check_boolean CHECK (\" + " + column.getConstantFieldName() + " + \" IN ( 0, 1 ) )");
            }

            if( column.isForeignKey() ) {
                String parentTable = column.getObjectType().toString();
                parentTable = parentTable.substring( parentTable.lastIndexOf( '.' ) + 1, parentTable.lastIndexOf( "Model" ) );
                parentTable = Definition.formatNameForSQL( parentTable );

                sql.add(" CONSTRAINT \" + " + column.getConstantFieldName() + " + \"_fk REFERENCES ").add(parentTable ).add("(_id)");

                final ForeignKey foreignKey = column.foreignKey();
                if( foreignKey != null && foreignKey.onDelete() != ForeignKey.Action.NONE ) {
                    sql.add(" ON DELETE ").add(foreignKey.onDelete().toString() );
                }
                if( foreignKey != null && foreignKey.onUpdate() != ForeignKey.Action.NONE ) {
                    sql.add(" ON UPDATE ").add(foreignKey.onUpdate().toString() );
                }
            }

            if( index != fields.size() - 1 ) {
                sql.add( "," );
            }
            sql.add( "\"\n" );
            index++;
        }
        sql.add( "\t+ $S );\n", ");" );
        return sql.build();
    }

    private void tableConstant( final TypeSpec.Builder classBuilder, final String name) {
        classBuilder.addField(constant(String.class, "TABLE", name).addJavadoc("SQLite table name\n").build());
    }

    private void insert( final TypeSpec.Builder classBuilder, final Set<ColumnDefinition> fields ) {
        ClassName uri = ClassName.get("android.net", "Uri");
        ClassName contentValues = ClassName.get( "android.content", "ContentValues" );
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("insert")
                .returns(uri)
                .addModifiers(PUBLIC, STATIC, FINAL)
                .addAnnotation(nullable)
                .addParameter(ParameterSpec.builder(context, "context", FINAL).addAnnotation(nonNull).build())
                .addParameter(ParameterSpec.builder(uri, "contentUri", FINAL).addAnnotation(nonNull).build() )
                .addStatement("final $T insert = new $T()", contentValues, contentValues);
        for( ColumnDefinition field : fields ) {
            if( field.getColumnName().equals("_id") ) {
                continue;
            }

            final ParameterSpec.Builder parameter = ParameterSpec.builder(field.getObjectType(), field.getFieldName(), FINAL);
            if( field.isNotNull() ) {
                parameter.addAnnotation( nonNull );
            } else if( field.isObjectTypeNotPrimitive() ) {
                parameter.addAnnotation( nullable );
            }
            methodBuilder.addParameter(parameter.build());

            if( field.isBoolean() ) {
                methodBuilder.addStatement("insert.put( $L, $L ? 1 : 0 )", field.getConstantFieldName(), field.getFieldName() );
            } else if( field.isForeignKey() ) {
                if( field.isNotNull() ) {
                    methodBuilder.addStatement("insert.put( $L, $L.getId() )", field.getConstantFieldName(), field.getFieldName() );
                } else {
                    methodBuilder.addStatement("insert.put( $L, $L != null ? $L.getId() : 0 )", field.getConstantFieldName(), field.getFieldName(), field.getFieldName() );
                }
            } else {
                methodBuilder.addStatement( "insert.put( $L, $L )", field.getConstantFieldName(), field.getFieldName() );
            }
        }
        methodBuilder.addStatement("return context.getContentResolver().insert( contentUri, insert )");

        classBuilder.addMethod(
                methodBuilder.build());
    }

    private void update( final TypeSpec.Builder classBuilder ) {
        ClassName uri = ClassName.get("android.net", "Uri");
        ClassName contentValues = ClassName.get( "android.content", "ContentValues" );
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        classBuilder.addMethod(
                MethodSpec.methodBuilder("update")
                        .returns(int.class)
                        .addModifiers(PUBLIC, STATIC, FINAL)
                        .addParameter(ParameterSpec.builder(context, "context", FINAL).addAnnotation(nonNull).build())
                        .addParameter(ParameterSpec.builder(uri, "contentUri", FINAL).addAnnotation(nonNull).build() )
                        .addParameter(ParameterSpec.builder(contentValues, "update", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String.class, "where", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String[].class, "selectionArgs", FINAL).addAnnotation(nullable).build())
                        .addStatement("return context.getContentResolver().update( contentUri, update, where, selectionArgs )")
                        .build() );
    }

    private void delete( final TypeSpec.Builder classBuilder ) {
        ClassName uri = ClassName.get("android.net", "Uri");
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        classBuilder.addMethod(
                MethodSpec.methodBuilder("delete")
                        .returns(int.class)
                        .addModifiers(PUBLIC, STATIC, FINAL)
                        .addParameter(ParameterSpec.builder(context, "context", FINAL).addAnnotation(nonNull).build())
                        .addParameter(ParameterSpec.builder(uri, "contentUri", FINAL).addAnnotation(nonNull).build() )
                        .addParameter(ParameterSpec.builder(String.class, "where", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String[].class, "selectionArgs", FINAL).addAnnotation(nullable).build())
                        .addStatement("return context.getContentResolver().delete( contentUri, where, selectionArgs )")
                        .build() );
    }

    private static void columnConstants( final TypeSpec.Builder classBuilder, final Set<ColumnDefinition> columnDefinitions) {
        boolean first = true;
        for( ColumnDefinition columnDefinition : columnDefinitions) {
            if( columnDefinition.isPrimaryKey() ) {
                continue;
            }

            final FieldSpec.Builder field = constant(String.class, columnDefinition.getConstantFieldName(), columnDefinition.getColumnName());
            if( first ) {
                field.addJavadoc( "SQLite column names\n" );
                first = false;
            }
            classBuilder.addField( field.build() );
        }
    }

    private static void projection( final TypeSpec.Builder classBuilder, final Set<ColumnDefinition> columns ) {
        if( columns.size() > 0 ) {
            final CodeBlock.Builder value = CodeBlock.builder();
            int index = 0;
            for( ColumnDefinition column : columns ) {
                value.add( (index == 0 ? "{\n" : "") + "\t$L" + (index+1 == columns.size() ? "\n" : ",\n"), column.getConstantFieldName());
                index++;
            }
            value.add( "}" );

            classBuilder.addField(
                    FieldSpec.builder(String[].class, "PROJECTION")
                            .addModifiers(PUBLIC, STATIC, FINAL)
                            .initializer(value.build())
                            .addJavadoc("ContentProvider helper\n")
                            .build());
        }
    }

    private static void contentUri(final TypeSpec.Builder classBuilder, final String authority) {
        if (authority != null && authority.length() > 0) {
            ClassName uri = ClassName.get( "android.net", "Uri");
            classBuilder.addField(
                    FieldSpec.builder(uri, "CONTENT_URI")
                            .addModifiers(PUBLIC, STATIC, FINAL)
                            .initializer("Uri.parse( \"content://" + authority + "/\" + $L )", "TABLE")
                            .build());
        }
    }

    private static FieldSpec.Builder constant(final Class<?> type, final String name, final String value) {
        return constant(type, name, "$S", value);
    }

    private static FieldSpec.Builder constant(final Class<?> type, final String name, final String pattern, final String value) {
        return FieldSpec.builder(type, name)
                .addModifiers(PUBLIC, STATIC, FINAL)
                .initializer(pattern, value);
    }

    public boolean writeClass( final String packageName, final Filer filer) {
        try {
            final JavaFile javaFile = JavaFile.builder(packageName, generatedContract).build();
            javaFile.writeTo( filer );
        } catch (IOException e) {
            return false;
        }
        return true;
    }
}
