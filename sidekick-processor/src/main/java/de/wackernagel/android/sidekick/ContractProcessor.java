package de.wackernagel.android.sidekick;

import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.lang.model.util.Types;
import javax.tools.Diagnostic;

import de.wackernagel.android.sidekick.annotations.Contract;

import static com.squareup.javapoet.TypeSpec.classBuilder;
import static javax.lang.model.element.Modifier.ABSTRACT;
import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

@AutoService(Processor.class)
public class ContractProcessor extends AbstractProcessor {

    private Types typeUtils;
    private Elements elementUtils;
    private Messager log;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        elementUtils = processingEnv.getElementUtils();
        typeUtils = processingEnv.getTypeUtils();
        log = processingEnv.getMessager();
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        final Set<String> annotations = new HashSet<>();
        annotations.add( Contract.class.getCanonicalName() );
        return annotations;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        for( Element annotatedElement : roundEnv.getElementsAnnotatedWith( Contract.class ) ) {
            final TypeElement annotatedClass = (TypeElement) annotatedElement;
            final String authority = annotatedClass.getAnnotation(Contract.class).authority();
            final String className = annotatedClass.getSimpleName().toString();
            final String packageName = JavaUtils.getPackageName(elementUtils, annotatedClass);

            if (packageName == null) {
                log.printMessage(Diagnostic.Kind.WARNING, "No package for " + className + ". SKIP");
                continue;
            }

            final Set<ColumnField> fields = JavaUtils.getAnnotatedColumnFields(annotatedClass, typeUtils, elementUtils);
            final TypeSpec generatedClass = generateContract(className, fields, authority);
            writeClass(generatedClass, packageName, className);
        }
        return true;
    }

    private void writeClass(final TypeSpec generatedClass, final String packageName, final String className) {
        log.printMessage(Diagnostic.Kind.NOTE, "Generate contract for " + packageName + "." + className);
        try {
            JavaFile javaFile = JavaFile.builder(packageName, generatedClass).build();
            javaFile.writeTo(processingEnv.getFiler());
        } catch (IOException e) {
            log.printMessage(Diagnostic.Kind.WARNING, "File wasn't generated.");
        }
    }

    private TypeSpec generateContract(final String className, final Set<ColumnField> fields, final String authority) {
        final TypeSpec.Builder classBuilder = classBuilder(className + "Contract")
                .addModifiers(PUBLIC, ABSTRACT)
                .addJavadoc("Generated by Sidekick at " + new SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.ENGLISH).format(new Date()) + "\n");

        tableConstant(classBuilder, className);
        columnConstants(classBuilder, fields);
        projection(classBuilder, fields);
        contentUri(classBuilder, authority);
        insert(classBuilder, fields);
        update(classBuilder);
        delete(classBuilder);

        return classBuilder.build();
    }

    private void tableConstant(TypeSpec.Builder classBuilder, String className) {
        String name = className.toLowerCase();
        if ( !name.endsWith("s"))
            name = name.concat( "s" );

        classBuilder.addField(constant(String.class, "TABLE", name).addJavadoc("SQLite table name\n").build());
    }

    private void insert( final TypeSpec.Builder classBuilder, final Set<ColumnField> fields ) {
        ClassName uri = ClassName.get("android.net", "Uri");
        ClassName contentValues = ClassName.get( "android.content", "ContentValues" );
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("insert")
                .returns(uri)
                .addModifiers(PUBLIC, STATIC, FINAL)
                .addAnnotation(nullable)
                .addParameter( ParameterSpec.builder(context, "context", FINAL).addAnnotation( nonNull ).build() )
                .addStatement("final $T insert = new $T()", contentValues, contentValues);
        for( ColumnField field : fields ) {
            if( field.getColumnName().equals( "_id" ) )
                continue;
            methodBuilder.addParameter( field.getObjectType(), field.getFieldName(), Modifier.FINAL);
            methodBuilder.addStatement( "insert.put( $L, $L )", field.getConstantFieldName(), field.getFieldName() );
        }
        methodBuilder.addStatement("return context.getContentResolver().insert( CONTENT_URI, insert )");

        classBuilder.addMethod(
                methodBuilder.build());
    }

    private void update( final TypeSpec.Builder classBuilder ) {
        ClassName contentValues = ClassName.get( "android.content", "ContentValues" );
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        classBuilder.addMethod(
                MethodSpec.methodBuilder("update")
                        .returns(int.class)
                        .addModifiers(PUBLIC, STATIC, FINAL)
                        .addParameter(ParameterSpec.builder(context, "context", FINAL).addAnnotation(nonNull).build())
                        .addParameter(ParameterSpec.builder(contentValues, "update", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String.class, "where", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String[].class, "selectionArgs", FINAL).addAnnotation(nullable).build())
                        .addStatement("return context.getContentResolver().update( CONTENT_URI, update, where, selectionArgs )")
                        .build() );
    }

    private void delete( final TypeSpec.Builder classBuilder ) {
        ClassName context = ClassName.get( "android.content", "Context" );
        ClassName nullable = ClassName.get( "android.support.annotation", "Nullable" );
        ClassName nonNull = ClassName.get( "android.support.annotation", "NonNull" );

        classBuilder.addMethod(
                MethodSpec.methodBuilder("delete")
                        .returns(int.class)
                        .addModifiers(PUBLIC, STATIC, FINAL)
                        .addParameter(ParameterSpec.builder(context, "context", FINAL).addAnnotation(nonNull).build())
                        .addParameter(ParameterSpec.builder(String.class, "where", FINAL).addAnnotation(nullable).build())
                        .addParameter(ParameterSpec.builder(String[].class, "selectionArgs", FINAL).addAnnotation(nullable).build())
                        .addStatement("return context.getContentResolver().delete( CONTENT_URI, where, selectionArgs )")
                        .build() );
    }

    private static void columnConstants( final TypeSpec.Builder classBuilder, final Set<ColumnField> columnFields ) {
        boolean first = true;
        for( ColumnField columnField : columnFields ) {
            final FieldSpec.Builder field = constant(String.class, columnField.getConstantFieldName(), columnField.getColumnName());
            if( first ) {
                field.addJavadoc( "SQLite column names\n" );
                first = false;
            }
            classBuilder.addField( field.build() );
        }
    }

    private static void projection( final TypeSpec.Builder classBuilder, final Set<ColumnField> columns ) {
        if( columns.size() > 0 ) {
            final StringBuilder pattern = new StringBuilder();
            final Set<String> values = new HashSet<>(columns.size());
            for( ColumnField column : columns ) {
                if( pattern.length() > 0 ) {
                    pattern.append(", ");
                }
                pattern.append("$L");
                values.add(column.getConstantFieldName());
            }

            classBuilder.addField(
                FieldSpec.builder( String[].class, "PROJECTION" )
                        .addModifiers(PUBLIC, STATIC, FINAL)
                        .initializer("{ " + pattern.toString() + " }", values.toArray())
                        .addJavadoc("ContentProvider helper\n" )
                        .build());
        }
    }

    private static void contentUri(final TypeSpec.Builder classBuilder, final String authority) {
        if (authority != null && authority.length() > 0) {
            ClassName uri = ClassName.get( "android.net", "Uri");
            classBuilder.addField(
                    FieldSpec.builder(uri, "CONTENT_URI")
                            .addModifiers(PUBLIC, STATIC, FINAL)
                            .initializer("Uri.parse( \"content://" + authority + "/\" + $L )", "TABLE")
                    .build());
        }
    }

    private static FieldSpec.Builder constant(final Class<?> type, final String name, final String value) {
        return constant(type, name, "$S", value);
    }

    private static FieldSpec.Builder constant(final Class<?> type, final String name, final String pattern, final String value) {
        return FieldSpec.builder(type, name)
                .addModifiers(PUBLIC, STATIC, FINAL)
                .initializer(pattern, value);
    }

}
